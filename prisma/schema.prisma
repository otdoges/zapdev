generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Fragment {
  id         String    @id @default(uuid())
  messageId  String    @unique
  sandboxId  String?
  sandboxUrl String
  title      String
  files      Json
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  framework  Framework @default(NEXTJS)
  Message    Message   @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model FragmentDraft {
  id         String    @id @default(uuid())
  projectId  String    @unique
  sandboxId  String?
  sandboxUrl String?
  files      Json
  framework  Framework @default(NEXTJS)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Message {
  id         String       @id @default(uuid())
  content    String
  role       MessageRole
  type       MessageType
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  projectId  String
  Fragment   Fragment?
  Attachment Attachment[]
  Project    Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Project {
  id            String         @id @default(uuid())
  name          String
  userId        String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  framework     Framework      @default(NEXTJS)
  FragmentDraft FragmentDraft?
  Message       Message[]
}

model Usage {
  key    String    @id
  points Int
  expire DateTime?
}

enum Framework {
  NEXTJS
  ANGULAR
  REACT
  VUE
  SVELTE
}

enum MessageRole {
  USER
  ASSISTANT
}

enum MessageType {
  RESULT
  ERROR
}

enum AttachmentType {
  IMAGE
}

model Attachment {
  id        String         @id @default(uuid())
  type      AttachmentType
  url       String
  width     Int?
  height    Int?
  size      Int
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now()) @updatedAt
  messageId String
  Message   Message        @relation(fields: [messageId], references: [id], onDelete: Cascade)
}
