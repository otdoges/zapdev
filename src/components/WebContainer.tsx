import { useEffect, useRef, useState, useCallback } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { 
  Play, 
  Square, 
  RotateCcw, 
  ExternalLink, 
  Loader2,
  AlertCircle,
  CheckCircle,
  Terminal,
  FileText,
  Folder
} from "lucide-react";
import { WebContainer } from '@webcontainer/api';

interface WebContainerProps {
  code?: string;
  language?: string;
  isRunning?: boolean;
}

interface ProjectFile {
  file?: {
    contents: string;
  };
  directory?: {
    [key: string]: ProjectFile;
  };
}

interface FileStructure {
  [key: string]: ProjectFile;
}

const WebContainerComponent = ({ code, language = "express", isRunning = false }: WebContainerProps) => {
  const iframeRef = useRef<HTMLIFrameElement>(null);
  const [status, setStatus] = useState<"idle" | "installing" | "building" | "running" | "error" | "success">("idle");
  const [isLoading, setIsLoading] = useState(false);
  const [webcontainerInstance, setWebcontainerInstance] = useState<WebContainer | null>(null);
  const [previewUrl, setPreviewUrl] = useState<string>("");
  const [buildLogs, setBuildLogs] = useState<string[]>([]);
  const [showLogs, setShowLogs] = useState(false);

  // Initialize WebContainer instance
  useEffect(() => {
    const initWebContainer = async () => {
      try {
        const webcontainer = await WebContainer.boot();
        setWebcontainerInstance(webcontainer);
        
        // Listen for server-ready event
        webcontainer.on('server-ready', (port, url) => {
          setPreviewUrl(url);
          if (iframeRef.current) {
            iframeRef.current.src = url;
          }
          setStatus("success");
          setIsLoading(false);
        });
      } catch (error) {
        console.error('Failed to initialize WebContainer:', error);
        setStatus("error");
        setIsLoading(false);
        addLog(`Error: Failed to initialize WebContainer - ${error}`);
      }
    };

    initWebContainer();
  }, []);

  const addLog = (message: string) => {
    setBuildLogs(prev => [...prev, `[${new Date().toLocaleTimeString()}] ${message}`]);
  };

  // Parse AI-generated code and create Express project structure
  const parseCodeToExpressProject = useCallback((codeString: string): FileStructure => {
    // Try to extract different file types from the AI response
    const extractCodeBlocks = (code: string) => {
      const blocks: { [key: string]: string } = {};
      
      // Extract HTML, CSS, JS files from code blocks
      const fileMatches = code.matchAll(/```(?:html|css|js|javascript)\s*(?:\/\/\s*(.+\.(?:html|css|js)))?[\n\r]([\s\S]*?)```/g);
      
      for (const match of fileMatches) {
        const filename = match[1] || (match[0].includes('html') ? 'index.html' : match[0].includes('css') ? 'styles.css' : 'script.js');
        const content = match[2];
        blocks[filename] = content;
      }
      
      // If no specific files found, try to detect by content
      if (Object.keys(blocks).length === 0) {
        if (code.includes('<html') || code.includes('<!DOCTYPE')) {
          // It's HTML content
          blocks['index.html'] = code;
        } else if (code.includes('function') || code.includes('const') || code.includes('var')) {
          // It's JavaScript content
          blocks['script.js'] = code;
        } else {
          // Default to HTML with the content displayed
          blocks['index.html'] = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ZapDev Generated Content</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
            line-height: 1.6;
        }
        .content {
            background: #f8f9fa;
            padding: 2rem;
            border-radius: 8px;
            border-left: 4px solid #667eea;
        }
    </style>
</head>
<body>
    <h1>Generated Content</h1>
    <div class="content">
        <pre>${code.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</pre>
    </div>
</body>
</html>`;
        }
      }
      
      return blocks;
    };

    const codeBlocks = extractCodeBlocks(codeString);
    
    // Create a complete Express project structure
    const projectStructure: FileStructure = {
      'package.json': {
        file: {
          contents: JSON.stringify({
            name: "zapdev-express-app",
            version: "1.0.0",
            description: "Express app generated by ZapDev",
            main: "index.js",
            scripts: {
              start: "node index.js",
              dev: "node index.js"
            },
            dependencies: {
              "express": "^4.18.2"
            }
          }, null, 2)
        }
      },
      'index.js': {
        file: {
          contents: `const express = require('express');
const path = require('path');

const app = express();
const PORT = 3111;

// Serve static files from public directory
app.use(express.static('public'));

// Basic route
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// API route example
app.get('/api/hello', (req, res) => {
  res.json({ message: 'Hello from ZapDev Express server!' });
});

app.listen(PORT, () => {
  console.log(\`Server running at http://localhost:\${PORT}\`);
});`
        }
      },
      'public': {
        directory: {
          'index.html': {
            file: {
              contents: codeBlocks['index.html'] || Object.values(codeBlocks)[0] || `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ZapDev Express App</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .container {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            text-align: center;
            max-width: 500px;
            width: 90%;
        }
        
        h1 {
            color: #333;
            margin-bottom: 1rem;
            font-size: 2.5rem;
        }
        
        p {
            color: #666;
            margin-bottom: 2rem;
            font-size: 1.1rem;
        }
        
        .btn {
            background: #667eea;
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1rem;
            transition: background 0.3s;
        }
        
        .btn:hover {
            background: #5a6fd8;
        }
        
        .api-result {
            margin-top: 1rem;
            padding: 1rem;
            background: #f8f9fa;
            border-radius: 5px;
            border-left: 4px solid #667eea;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>ðŸš€ ZapDev Express</h1>
        <p>Your Express.js application is running successfully!</p>
        <button class="btn" onclick="testAPI()">Test API</button>
        <div id="api-result" class="api-result" style="display: none;"></div>
    </div>

    <script>
        async function testAPI() {
            try {
                const response = await fetch('/api/hello');
                const data = await response.json();
                const resultDiv = document.getElementById('api-result');
                resultDiv.innerHTML = \`<strong>API Response:</strong> \${data.message}\`;
                resultDiv.style.display = 'block';
            } catch (error) {
                console.error('Error:', error);
            }
        }
    </script>
</body>
</html>`
            }
          }
        }
      }
    };

    // Add any additional files from code blocks to public directory
    Object.entries(codeBlocks).forEach(([filename, content]) => {
      if (filename !== 'index.html') {
        // Add CSS, JS and other files to public directory
        projectStructure.public.directory![filename] = {
          file: { contents: content }
        };
      }
    });

    return projectStructure;
  }, []);


  const runCode = useCallback(async () => {
    if (!webcontainerInstance || !code) return;
    
    setIsLoading(true);
    setStatus("installing");
    setBuildLogs([]);
    addLog("Starting Express project setup...");
    
    try {
      // Parse the code and create Express project structure
      const projectFiles = parseCodeToExpressProject(code);
      addLog("Generated Express project structure");
      
      // Mount the files
      await webcontainerInstance.mount(projectFiles);
      addLog("Mounted project files");
      
      setStatus("installing");
      addLog("Installing dependencies...");
      
      // Install dependencies
      const installProcess = await webcontainerInstance.spawn('npm', ['install']);
      
      // Handle install output
      installProcess.output.pipeTo(new WritableStream({
        write(data) {
          addLog(`npm: ${data}`);
        },
      }));
      
      const installExitCode = await installProcess.exit;
      if (installExitCode !== 0) {
        throw new Error(`npm install failed with exit code ${installExitCode}`);
      }
      
      addLog("Dependencies installed successfully");
      setStatus("building");
      addLog("Starting Express server...");
      
      // Start the Express server
      const serverProcess = await webcontainerInstance.spawn('npm', ['start']);
      
      // Handle server output
      serverProcess.output.pipeTo(new WritableStream({
        write(data) {
          addLog(`server: ${data}`);
          if (data.includes('Server running') || data.includes('listening')) {
            setStatus("running");
          }
        },
      }));
      
    } catch (error) {
      console.error('Error running code:', error);
      setStatus("error");
      setIsLoading(false);
      addLog(`Error: ${error}`);
    }
  }, [webcontainerInstance, code, parseCodeToExpressProject]);

  const stopCode = async () => {
    if (webcontainerInstance) {
      try {
        // Kill all Node.js processes
        await webcontainerInstance.spawn('pkill', ['-f', 'node']);
      } catch (error) {
        console.log('Error stopping processes:', error);
      }
    }
    
    setStatus("idle");
    setPreviewUrl("");
    setBuildLogs([]);
    if (iframeRef.current) {
      iframeRef.current.src = "about:blank";
    }
  };

  const refreshCode = () => {
    if (status === "success" || status === "running") {
      runCode();
    }
  };

  const openInNewTab = () => {
    if (previewUrl) {
      window.open(previewUrl, '_blank');
    }
  };

  useEffect(() => {
    if (isRunning && code) {
      runCode();
    }
  }, [isRunning, code, runCode]);

  const getStatusColor = () => {
    switch (status) {
      case "installing":
      case "building":
        return "bg-blue-500/20 text-blue-400";
      case "running":
        return "bg-yellow-500/20 text-yellow-400";
      case "success":
        return "bg-green-500/20 text-green-400";
      case "error":
        return "bg-red-500/20 text-red-400";
      default:
        return "bg-gray-500/20 text-gray-400";
    }
  };

  const getStatusIcon = () => {
    switch (status) {
      case "installing":
      case "building":
      case "running":
        return <Loader2 className="w-3 h-3 animate-spin" />;
      case "success":
        return <CheckCircle className="w-3 h-3" />;
      case "error":
        return <AlertCircle className="w-3 h-3" />;
      default:
        return <FileText className="w-3 h-3" />;
    }
  };

  const getStatusText = () => {
    switch (status) {
      case "installing":
        return "Installing";
      case "building":
        return "Building";
      case "running":
        return "Running";
      case "success":
        return "Ready";
      case "error":
        return "Error";
      default:
        return "Idle";
    }
  };

  return (
    <div className="h-full flex flex-col">
      {/* Controls */}
      <div className="flex items-center justify-between p-3 border-b border-gray-700/50">
        <div className="flex items-center space-x-2">
          <Badge variant="outline" className={`${getStatusColor()} border-0`}>
            {getStatusIcon()}
            <span className="ml-1">{getStatusText()}</span>
          </Badge>
          <span className="text-xs text-gray-400">
            Express.js
          </span>
        </div>
        
        <div className="flex items-center space-x-1">
          <Button
            variant="outline"
            size="sm"
            onClick={runCode}
            disabled={isLoading}
            className="border-gray-600 text-gray-300 hover:bg-gray-700"
          >
            <Play className="w-3 h-3 mr-1" />
            Run
          </Button>
          
          <Button
            variant="outline"
            size="sm"
            onClick={stopCode}
            disabled={status === "idle"}
            className="border-gray-600 text-gray-300 hover:bg-gray-700"
          >
            <Square className="w-3 h-3 mr-1" />
            Stop
          </Button>
          
          <Button
            variant="outline"
            size="sm"
            onClick={refreshCode}
            disabled={status !== "success" && status !== "running"}
            className="border-gray-600 text-gray-300 hover:bg-gray-700"
          >
            <RotateCcw className="w-3 h-3 mr-1" />
            Refresh
          </Button>
          
          <Button
            variant="outline"
            size="sm"
            onClick={() => setShowLogs(!showLogs)}
            className="border-gray-600 text-gray-300 hover:bg-gray-700"
          >
            <Terminal className="w-3 h-3 mr-1" />
            Logs
          </Button>
          
          <Button
            variant="outline"
            size="sm"
            onClick={openInNewTab}
            disabled={status !== "success" && status !== "running"}
            className="border-gray-600 text-gray-300 hover:bg-gray-700"
          >
            <ExternalLink className="w-3 h-3 mr-1" />
            Open
          </Button>
        </div>
      </div>

      {/* Logs Panel */}
      {showLogs && (
        <div className="h-32 bg-gray-900 border-b border-gray-700 overflow-auto">
          <div className="p-3 text-xs font-mono text-gray-300">
            {buildLogs.map((log, index) => (
              <div key={index} className="mb-1">
                {log}
              </div>
            ))}
            {buildLogs.length === 0 && (
              <div className="text-gray-500">No logs yet...</div>
            )}
          </div>
        </div>
      )}

      {/* Preview */}
      <div className="flex-1 bg-white">
        {status === "idle" ? (
          <div className="h-full flex items-center justify-center text-gray-500">
            <div className="text-center">
              <Folder className="w-16 h-16 mx-auto mb-4" />
              <p className="text-lg font-medium">Ready to Build</p>
              <p className="text-sm text-gray-400 mt-2">
                Click "Run" to create your Express application
              </p>
            </div>
          </div>
        ) : (status === "installing" || status === "building" || status === "running") && status !== "success" ? (
          <div className="h-full flex items-center justify-center">
            <div className="text-center">
              <Loader2 className="w-8 h-8 animate-spin mx-auto mb-4 text-blue-500" />
              <p className="text-lg font-medium text-gray-700">
                {status === "installing" && "Installing Dependencies..."}
                {status === "building" && "Building Application..."}
                {status === "running" && "Starting Server..."}
              </p>
              <p className="text-sm text-gray-500 mt-2">
                This may take a few moments
              </p>
            </div>
          </div>
        ) : status === "error" ? (
          <div className="h-full flex items-center justify-center text-red-500">
            <div className="text-center">
              <AlertCircle className="w-16 h-16 mx-auto mb-4" />
              <p className="text-lg font-medium">Build Failed</p>
              <p className="text-sm text-gray-400 mt-2">
                Check the logs for more details
              </p>
              <Button
                variant="outline"
                size="sm"
                onClick={() => setShowLogs(true)}
                className="mt-4"
              >
                <Terminal className="w-4 h-4 mr-2" />
                Show Logs
              </Button>
            </div>
          </div>
        ) : (
          <iframe
            ref={iframeRef}
            className="w-full h-full border-0"
            title="Express.js Preview"
            sandbox="allow-scripts allow-same-origin allow-forms allow-popups allow-modals"
          />
        )}
      </div>
    </div>
  );
};

export default WebContainerComponent;