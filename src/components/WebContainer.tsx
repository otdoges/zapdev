import { useEffect, useRef, useState, useCallback } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { 
  Play, 
  Square, 
  RotateCcw, 
  ExternalLink, 
  Loader2,
  AlertCircle,
  CheckCircle,
  Terminal,
  FileText,
  Folder
} from "lucide-react";
import { WebContainer } from '@webcontainer/api';

interface WebContainerProps {
  code?: string;
  language?: string;
  isRunning?: boolean;
}

interface ProjectFile {
  file?: {
    contents: string;
  };
  directory?: {
    [key: string]: ProjectFile;
  };
}

interface FileStructure {
  [key: string]: ProjectFile;
}

const WebContainerComponent = ({ code, language = "nextjs", isRunning = false }: WebContainerProps) => {
  const iframeRef = useRef<HTMLIFrameElement>(null);
  const [status, setStatus] = useState<"idle" | "installing" | "building" | "running" | "error" | "success">("idle");
  const [isLoading, setIsLoading] = useState(false);
  const [webcontainerInstance, setWebcontainerInstance] = useState<WebContainer | null>(null);
  const [previewUrl, setPreviewUrl] = useState<string>("");
  const [buildLogs, setBuildLogs] = useState<string[]>([]);
  const [showLogs, setShowLogs] = useState(false);

  // Initialize WebContainer instance
  useEffect(() => {
    const initWebContainer = async () => {
      try {
        const webcontainer = await WebContainer.boot();
        setWebcontainerInstance(webcontainer);
        
        // Listen for server-ready event
        webcontainer.on('server-ready', (port, url) => {
          setPreviewUrl(url);
          if (iframeRef.current) {
            iframeRef.current.src = url;
          }
          setStatus("success");
          setIsLoading(false);
        });
      } catch (error) {
        console.error('Failed to initialize WebContainer:', error);
        setStatus("error");
        setIsLoading(false);
        addLog(`Error: Failed to initialize WebContainer - ${error}`);
      }
    };

    initWebContainer();
  }, []);

  const addLog = (message: string) => {
    setBuildLogs(prev => [...prev, `[${new Date().toLocaleTimeString()}] ${message}`]);
  };

  // Parse AI-generated code and create Next.js project structure
  const parseCodeToNextJSProject = (codeString: string): FileStructure => {
    // Try to extract different file types from the AI response
    const extractCodeBlocks = (code: string) => {
      const blocks: { [key: string]: string } = {};
      
      // Extract specific files mentioned in the code
      const fileMatches = code.matchAll(/```(?:tsx?|jsx?|css|json|md)\s*(?:\/\/\s*(.+\.(?:tsx?|jsx?|css|json|md)))?[\n\r]([\s\S]*?)```/g);
      
      for (const match of fileMatches) {
        const filename = match[1] || 'component.tsx';
        const content = match[2];
        blocks[filename] = content;
      }
      
      // If no specific files found, try to detect by content
      if (Object.keys(blocks).length === 0) {
        // Check if it looks like a React component
        if (code.includes('export default') && (code.includes('function') || code.includes('const'))) {
          blocks['page.tsx'] = code;
        } else if (code.includes('<html') || code.includes('<!DOCTYPE')) {
          // Convert HTML to Next.js page
          blocks['page.tsx'] = convertHtmlToNextJS(code);
        } else {
          // Default to a simple page
          blocks['page.tsx'] = `
export default function HomePage() {
  return (
    <div className="min-h-screen bg-gray-50 py-12">
      <div className="max-w-4xl mx-auto px-4">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-900 mb-4">
            Welcome to Your Website
          </h1>
          <p className="text-xl text-gray-600">
            Generated by ZapDev
          </p>
        </div>
        <div className="bg-white rounded-lg shadow-lg p-8">
          <pre className="whitespace-pre-wrap text-sm text-gray-800">
            ${code.replace(/`/g, '\\`')}
          </pre>
        </div>
      </div>
    </div>
  );
}`;
        }
      }
      
      return blocks;
    };

    const codeBlocks = extractCodeBlocks(codeString);
    
    // Create a complete Next.js project structure
    const projectStructure: FileStructure = {
      'package.json': {
        file: {
          contents: JSON.stringify({
            name: "zapdev-nextjs-app",
            version: "0.1.0",
            private: true,
            scripts: {
              dev: "next dev",
              build: "next build",
              start: "next start",
              lint: "next lint"
            },
            dependencies: {
              "react": "^18.2.0",
              "react-dom": "^18.2.0",
              "next": "^14.1.0",
              "@types/node": "^20.11.0",
              "@types/react": "^18.2.48",
              "@types/react-dom": "^18.2.18",
              "typescript": "^5.3.3",
              "tailwindcss": "^3.4.1",
              "autoprefixer": "^10.4.17",
              "postcss": "^8.4.35",
              "clsx": "^2.1.0",
              "lucide-react": "^0.323.0"
            }
          }, null, 2)
        }
      },
      'next.config.js': {
        file: {
          contents: `/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    appDir: true,
  },
}

module.exports = nextConfig`
        }
      },
      'tsconfig.json': {
        file: {
          contents: JSON.stringify({
            compilerOptions: {
              target: "es5",
              lib: ["dom", "dom.iterable", "es6"],
              allowJs: true,
              skipLibCheck: true,
              strict: true,
              noEmit: true,
              esModuleInterop: true,
              module: "esnext",
              moduleResolution: "bundler",
              resolveJsonModule: true,
              isolatedModules: true,
              jsx: "preserve",
              incremental: true,
              plugins: [
                {
                  name: "next"
                }
              ],
              baseUrl: ".",
              paths: {
                "@/*": ["./src/*"]
              }
            },
            include: ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
            exclude: ["node_modules"]
          }, null, 2)
        }
      },
      'tailwind.config.js': {
        file: {
          contents: `/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}`
        }
      },
      'postcss.config.js': {
        file: {
          contents: `module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}`
        }
      },
      'src': {
        directory: {
          'app': {
            directory: {
              'globals.css': {
                file: {
                  contents: `@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
  }
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
}`
                }
              },
              'layout.tsx': {
                file: {
                  contents: `import './globals.css'
import { Inter } from 'next/font/google'

const inter = Inter({ subsets: ['latin'] })

export const metadata = {
  title: 'ZapDev App',
  description: 'Generated by ZapDev AI',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  )
}`
                }
              },
              'page.tsx': {
                file: {
                  contents: codeBlocks['page.tsx'] || codeBlocks['component.tsx'] || Object.values(codeBlocks)[0] || `
export default function Home() {
  return (
    <main className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      <div className="container mx-auto px-4 py-16">
        <div className="text-center">
          <h1 className="text-5xl font-bold text-gray-900 mb-6">
            Welcome to Your Next.js App
          </h1>
          <p className="text-xl text-gray-600 mb-8">
            Built with Next.js, TypeScript, and Tailwind CSS
          </p>
          <div className="bg-white rounded-lg shadow-xl p-8 max-w-2xl mx-auto">
            <p className="text-lg text-gray-700">
              Your application is ready! Start building amazing features.
            </p>
          </div>
        </div>
      </div>
    </main>
  )
}`
                }
              }
            }
          },
          'components': {
            directory: {
              'ui': {
                directory: {}
              }
            }
          }
        }
      }
    };

    // Add any additional components from code blocks
    Object.entries(codeBlocks).forEach(([filename, content]) => {
      if (filename !== 'page.tsx' && filename !== 'component.tsx') {
        if (filename.includes('/')) {
          // Handle nested paths
          const pathParts = filename.split('/');
          let current = projectStructure.src.directory!;
          
          for (let i = 0; i < pathParts.length - 1; i++) {
            const part = pathParts[i];
            if (!current[part]) {
              current[part] = { directory: {} };
            }
            current = current[part].directory!;
          }
          
          current[pathParts[pathParts.length - 1]] = {
            file: { contents: content }
          };
        } else {
          // Add to components directory
          projectStructure.src.directory!.components.directory![filename] = {
            file: { contents: content }
          };
        }
      }
    });

    return projectStructure;
  };

  const convertHtmlToNextJS = (html: string): string => {
    // Basic HTML to Next.js conversion
    const bodyMatch = html.match(/<body[^>]*>([\s\S]*?)<\/body>/i);
    const bodyContent = bodyMatch ? bodyMatch[1] : html;
    
    return `
export default function HomePage() {
  return (
    <div>
      ${bodyContent}
    </div>
  );
}`;
  };

  const runCode = useCallback(async () => {
    if (!webcontainerInstance || !code) return;
    
    setIsLoading(true);
    setStatus("installing");
    setBuildLogs([]);
    addLog("Starting Next.js project setup...");
    
    try {
      // Parse the code and create Next.js project structure
      const projectFiles = parseCodeToNextJSProject(code);
      addLog("Generated Next.js project structure");
      
      // Mount the files
      await webcontainerInstance.mount(projectFiles);
      addLog("Mounted project files");
      
      setStatus("installing");
      addLog("Installing dependencies...");
      
      // Install dependencies
      const installProcess = await webcontainerInstance.spawn('npm', ['install']);
      
      // Handle install output
      installProcess.output.pipeTo(new WritableStream({
        write(data) {
          addLog(`npm: ${data}`);
        },
      }));
      
      const installExitCode = await installProcess.exit;
      if (installExitCode !== 0) {
        throw new Error(`npm install failed with exit code ${installExitCode}`);
      }
      
      addLog("Dependencies installed successfully");
      setStatus("building");
      addLog("Starting development server...");
      
      // Start the Next.js development server
      const serverProcess = await webcontainerInstance.spawn('npm', ['run', 'dev']);
      
      // Handle server output
      serverProcess.output.pipeTo(new WritableStream({
        write(data) {
          addLog(`dev server: ${data}`);
          if (data.includes('Ready') || data.includes('compiled')) {
            setStatus("running");
          }
        },
      }));
      
    } catch (error) {
      console.error('Error running code:', error);
      setStatus("error");
      setIsLoading(false);
      addLog(`Error: ${error}`);
    }
  }, [webcontainerInstance, code]);

  const stopCode = async () => {
    if (webcontainerInstance) {
      try {
        // Kill all processes
        await webcontainerInstance.spawn('pkill', ['-f', 'next']);
      } catch (error) {
        console.log('Error stopping processes:', error);
      }
    }
    
    setStatus("idle");
    setPreviewUrl("");
    setBuildLogs([]);
    if (iframeRef.current) {
      iframeRef.current.src = "about:blank";
    }
  };

  const refreshCode = () => {
    if (status === "success" || status === "running") {
      runCode();
    }
  };

  const openInNewTab = () => {
    if (previewUrl) {
      window.open(previewUrl, '_blank');
    }
  };

  useEffect(() => {
    if (isRunning && code) {
      runCode();
    }
  }, [isRunning, code, runCode]);

  const getStatusColor = () => {
    switch (status) {
      case "installing":
      case "building":
        return "bg-blue-500/20 text-blue-400";
      case "running":
        return "bg-yellow-500/20 text-yellow-400";
      case "success":
        return "bg-green-500/20 text-green-400";
      case "error":
        return "bg-red-500/20 text-red-400";
      default:
        return "bg-gray-500/20 text-gray-400";
    }
  };

  const getStatusIcon = () => {
    switch (status) {
      case "installing":
      case "building":
      case "running":
        return <Loader2 className="w-3 h-3 animate-spin" />;
      case "success":
        return <CheckCircle className="w-3 h-3" />;
      case "error":
        return <AlertCircle className="w-3 h-3" />;
      default:
        return <FileText className="w-3 h-3" />;
    }
  };

  const getStatusText = () => {
    switch (status) {
      case "installing":
        return "Installing";
      case "building":
        return "Building";
      case "running":
        return "Running";
      case "success":
        return "Ready";
      case "error":
        return "Error";
      default:
        return "Idle";
    }
  };

  return (
    <div className="h-full flex flex-col">
      {/* Controls */}
      <div className="flex items-center justify-between p-3 border-b border-gray-700/50">
        <div className="flex items-center space-x-2">
          <Badge variant="outline" className={`${getStatusColor()} border-0`}>
            {getStatusIcon()}
            <span className="ml-1">{getStatusText()}</span>
          </Badge>
          <span className="text-xs text-gray-400">
            Next.js
          </span>
        </div>
        
        <div className="flex items-center space-x-1">
          <Button
            variant="outline"
            size="sm"
            onClick={runCode}
            disabled={isLoading}
            className="border-gray-600 text-gray-300 hover:bg-gray-700"
          >
            <Play className="w-3 h-3 mr-1" />
            Run
          </Button>
          
          <Button
            variant="outline"
            size="sm"
            onClick={stopCode}
            disabled={status === "idle"}
            className="border-gray-600 text-gray-300 hover:bg-gray-700"
          >
            <Square className="w-3 h-3 mr-1" />
            Stop
          </Button>
          
          <Button
            variant="outline"
            size="sm"
            onClick={refreshCode}
            disabled={status !== "success" && status !== "running"}
            className="border-gray-600 text-gray-300 hover:bg-gray-700"
          >
            <RotateCcw className="w-3 h-3 mr-1" />
            Refresh
          </Button>
          
          <Button
            variant="outline"
            size="sm"
            onClick={() => setShowLogs(!showLogs)}
            className="border-gray-600 text-gray-300 hover:bg-gray-700"
          >
            <Terminal className="w-3 h-3 mr-1" />
            Logs
          </Button>
          
          <Button
            variant="outline"
            size="sm"
            onClick={openInNewTab}
            disabled={status !== "success" && status !== "running"}
            className="border-gray-600 text-gray-300 hover:bg-gray-700"
          >
            <ExternalLink className="w-3 h-3 mr-1" />
            Open
          </Button>
        </div>
      </div>

      {/* Logs Panel */}
      {showLogs && (
        <div className="h-32 bg-gray-900 border-b border-gray-700 overflow-auto">
          <div className="p-3 text-xs font-mono text-gray-300">
            {buildLogs.map((log, index) => (
              <div key={index} className="mb-1">
                {log}
              </div>
            ))}
            {buildLogs.length === 0 && (
              <div className="text-gray-500">No logs yet...</div>
            )}
          </div>
        </div>
      )}

      {/* Preview */}
      <div className="flex-1 bg-white">
        {status === "idle" ? (
          <div className="h-full flex items-center justify-center text-gray-500">
            <div className="text-center">
              <Folder className="w-16 h-16 mx-auto mb-4" />
              <p className="text-lg font-medium">Ready to Build</p>
              <p className="text-sm text-gray-400 mt-2">
                Click "Run" to create your Next.js application
              </p>
            </div>
          </div>
        ) : (status === "installing" || status === "building" || status === "running") && status !== "success" ? (
          <div className="h-full flex items-center justify-center">
            <div className="text-center">
              <Loader2 className="w-8 h-8 animate-spin mx-auto mb-4 text-blue-500" />
              <p className="text-lg font-medium text-gray-700">
                {status === "installing" && "Installing Dependencies..."}
                {status === "building" && "Building Application..."}
                {status === "running" && "Starting Server..."}
              </p>
              <p className="text-sm text-gray-500 mt-2">
                This may take a few moments
              </p>
            </div>
          </div>
        ) : status === "error" ? (
          <div className="h-full flex items-center justify-center text-red-500">
            <div className="text-center">
              <AlertCircle className="w-16 h-16 mx-auto mb-4" />
              <p className="text-lg font-medium">Build Failed</p>
              <p className="text-sm text-gray-400 mt-2">
                Check the logs for more details
              </p>
              <Button
                variant="outline"
                size="sm"
                onClick={() => setShowLogs(true)}
                className="mt-4"
              >
                <Terminal className="w-4 h-4 mr-2" />
                Show Logs
              </Button>
            </div>
          </div>
        ) : (
          <iframe
            ref={iframeRef}
            className="w-full h-full border-0"
            title="Next.js Preview"
            sandbox="allow-scripts allow-same-origin allow-forms allow-popups allow-modals"
          />
        )}
      </div>
    </div>
  );
};

export default WebContainerComponent;